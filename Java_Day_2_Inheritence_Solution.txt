
1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?



package azam;

public class Parent
{
	Parent()
	{
	System.out.println("IN PARENT DEFAULT CONSTRUCTOR");	
	}
	Parent(int a)
	{
		System.out.println("IN PARENT PARAMETRISE CONSTRUCTOR");
	}
}


package azam;

public class Child extends Parent
{
Child()
{
	System.out.println("in child default constructor");
}
Child(int b)
{
	System.out.println("in child parametrise constructor");
}
}


package azam;

public class Child2 extends Child
{
	Child2()
	{
		System.out.println("in child2 default constructor");
	}
	Child2(int b)
	{
		System.out.println("in child2 parametrise constructor");
}
}



package azam;

public class Call 
{

	public static void main(String[] args)
	{
	
		Parent ref=new Child2(2);
		Parent ref1=new Child(2);
		Parent ref2=new Parent(2);
		
	}
	

}

........................................


2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?




package azam;

public class Vehicle 
{
	public void start()
	{
		System.out.println("in Vehicle");
	}
}
package azam;

public class FourWheeler  extends Vehicle 
{
	public void start()
	{
	System.out.println("in FourWheeler");
	}
}
package azam;

public class Call 
{

	public static void main(String[] args)
	{
	
		Vehicle ref=new FourWheeler(); //
		ref.start();
		
	}
	

}

...............................



3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.





package azam;

public class Parent
{
	Parent()
	{
	System.out.println("IN PARENT DEFAULT CONSTRUCTOR");	
	}
	Parent(int a)
	{
		System.out.println("IN PARENT PARAMETRISE CONSTRUCTOR");
	}
}


package azam;

public class Child extends Parent
{
Child()
{
	System.out.println("in child default constructor");
}
Child(int b)
{
	System.out.println("in child parametrise constructor");
}
}


package azam;

public class Child2 extends Parent
{
	Child2()
	{
		System.out.println("in child2 default constructor");
	}
	Child2(int b)
	{
		System.out.println("in child2 parametrise constructor");
}
}



package azam;

public class Call 
{

	public static void main(String[] args)
	{
	
		Parent ref=new Child2(2);
		Parent ref1=new Child(2);
		Parent ref2=new Parent(2);
		
	}
	

}

...............................


4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.




package azam;

public class Top1
{
	public void disp1()
	{
		System.out.println("in top1");
	}
}
package azam;

public class Bottom1  extends Top1
{
	public void disp1()
	{
	System.out.println("in bottom1");
	}
}
package azam;

public class Bottom2 extends Top1
{
	
		public void disp1()
		{
		System.out.println("in bottom2");
		}
}

package azam;

public class Bottom3 extends Top1
{
	
	public void disp1()
	{
	System.out.println("in bottom3");
	}

}
package azam;

public class Call 
{

	public static void create(Top1 ref)
	{
		ref.disp1();
	}
	
	public static void main(String[] args)
	{
	
	    create(new Bottom1());
	    create(new Bottom2());
	    create(new Bottom3());
	    create(new Top1());
		
	}
	

}

..........................



5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.



package falguni;

abstract class Bapu
{
	abstract void draw();
	
}

class Triangle extends Bapu
{

	@Override
	void draw()
	{
		System.out.println("triangle");
		
	}
	
}

class Polygon extends Bapu
{

	@Override
	void draw() 
	{
		System.out.println("polygon");
		
	}
	
}

class Circle extends Bapu
{

	@Override
	void draw()
	{
	System.out.println("circle");	
	}
	
}
public class Shape 
{
	public static void main(String azam[])
	{
	Bapu arr[]=new Bapu[3];
	
        arr[0]=new Triangle();
        arr[1]=new Circle();
        arr[2]=new Polygon();
     
        for(int i=0;i<arr.length;i++)
        {
        	arr[i].draw();
        }
}
}




...................


6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.



package falguni;

interface A
{
	void disp1();
}

interface B extends A
{
	void disp2();
}

class C implements B
{

	@Override
	public void disp1() 
	{
		System.out.println("In disp 1 of C");
		
	}

	@Override
	public void disp2() 
	{
		System.out.println("In disp 2 of C");
		
	}
	
}



public class Inter 
{

	public static void main(String[] args)
	{
	C d=new C();
	d.disp1();
	d.disp2();
	
	
		
	}

}


............


7) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.


package falguni;

class Parent
{
	void print()
	{
		System.out.println("print parent1");
	}
	
}



interface Parent2 
{
	void disp();
}

class Child extends Parent implements Parent2
{

	@Override
	public void disp() 
	{
		System.out.println("in child");
		
	}
}
	
public class Demo
{

public static void main(String args[])
{
	Child c=new Child();
	c.disp();
}
}






...............


8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.




package falguni;

public class Base1
{
Base1(int a)
{
	System.out.println("in param Base1");
}
public static void main(String[] args) 
{
	Base1 ref=new Sub1();	
}
}
class Sub1 extends Base1
{
	Sub1()
	{
		super(0);
	 System.out.println("in default sub1");
		
	}

	Sub1(int a) 
	{
		super(a);
		System.out.println("in 1 param Sub1");
		
	}
	
	Sub1(int a,int b)
	{
		super(20);
		System.out.println("in param 2 sub1");
	}
}







.........................


9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.






package falguni;

public class Outdoor
{
	public static void Perform(Game c)
	{
		c.Play();
	}
	public static void main(String args[])
	{
		Perform(new Cricket());
		Perform(new Football());
		Perform(new Tennis());
	}
}


interface Game 
{
abstract void Play();
}

class Cricket implements Game
{

	@Override
	public void Play() 
	{
		System.out.println("play Cricket");
		
	}
	
}
 class Football implements Game
 {

	@Override
	public void Play() 
	{
      System.out.println("play Football");
	}
	 
 }
 
 class Tennis implements Game
 {

	@Override
	public void Play() 
	{
		System.out.println("play Tennis");
	}
	 
 }
 
 
 
 
 
 
 
 

