1)Define 2 classes “First” and “Second” with member variables , member functions and constructors of  your choice. Now define a class “Two” in which define main function . In main function create various instances of First and Second  and call their individual member functions.





package falguni;

public class Two 
{
	
	public static void main(String[] args) 
	{
	First ref1=new First();
	Second ref2= new Second(2);
	
	ref1.disp();
System.out.println(ref1.getNum());
	ref2.print();
	System.out.println(ref2.getS());
	}

}

class First
{
	private int num=32;
	
	public int getNum() {
		return num;
	}
	void disp()
	{
		System.out.println("in First");
	}
	First()
	{
		System.out.println("in first constructor");
	}
}

class Second 
{
	 String s="FalZam";
	 
	public String getS() {
		return s;
	}
	void print()
	{
		System.out.println("in Second");
	}
	Second(int a)
	{
		System.out.println("in second constructor");
	}
}






-.................................------------------------




2)   Create a class with static and non-static member variables. Define static and non-static member functions. Create instance of this class and call both static and non-static member functions.





package falguni;

public class Stats 
{

	public static void main(String[] args) 
	{
			One fer= new One();
			System.out.println(fer.getY());
			System.out.println(One.getX());
			
	}

}

class One
{
	static int x=123;
	private String y="JAVA";
	public static int getX() {
		return x;
	}
	public static void setX(int x) {
		One.x = x;
	}
	public String getY() {
		return y;
	}
	public void setY(String y) {
		this.y = y;
	}
	
}




......................................







3)Define a class “Check” in which declare member variables using  different accessibility modifiers i.e.  <default>, private ,public and protected.   Define a function “disp”  which should be public.  Define a class “CheckDemo” in which you will write “main()” function. Create an instance of  the class “Check” and  show how many  variables can be accessed directly and how many indirectly.



package falguni;

public class CheckDemo
{

	public static void main(String[] args) 
	{
			Check fer= new Check();
			System.out.println(fer.getY());
			System.out.println(fer.getX());
			System.out.println(fer.getC());
			System.out.println(fer.getNum());
			fer.disp();
			
	}

}

class Check
{
	private int x=123;
	protected String y="JAVA";
	char c='a';
	
	public void setC(char c) 
	{
		this.c = c;
	}
	
	public char getC() 
	{
		return c;
	}

	public int num=10;
	
	public int getNum() 
	{
		return num;
	}

	
	public void setNum(int num) 
	{
		this.num = num;
	}
	
	
  public int getX()
    {
		return x;
	}
	public void setX(int x) 
	{
		this.x = x;
	}
	protected String getY() 
	{
		return y;
	}
	protected void setY(String y) 
	{
		this.y = y;
	}
	public void disp()
	{
		System.out.println("in display");
	}
}



......................................


4)Show the example of single level inheritance with constructor invocation.


package falguni;

public class Inher {

	public static void main(String[] args) 
	{
		Parent p=new Parent();
		Child c=new Child(2);
	}

}


class Parent
{
	Parent()
	{
		System.out.println("in Parent const");
	}
}

class Child extends Parent
{
	Child()
	{
		System.out.println("in constrctor");
	}
	Child(int a)
	{
		System.out.println("in param constructor");
	}
}




...........................


5)Show the example of multi-level inheritance with constructor invocation.



package falguni;

public class Inher {

	public static void main(String[] args) 
	{
		Parent p=new Parent();
		Child c=new Child(2);
		Child2 d=new Child2();
	}

}


class Parent
{
	Parent()
	{
		System.out.println("in Parent const");
	}
}

class Child extends Parent
{
	Child()
	{
		System.out.println("in constrctor");
	}
	Child(int a)
	{
		System.out.println("in param constructor");
	}
}


class Child2 extends Child
{
	Child2()
	{
		System.out.println("in child 2 constrctor");
	}
}





...................................



6)Show the example of hierarchical inheritance with constructor invocation.



package falguni;

public class Inher {

	public static void main(String[] args) 
	{
		Parent p=new Parent();
		Child c=new Child(2);
		Child2 d=new Child2();
	}

}


class Parent
{
	Parent()
	{
		System.out.println("in Parent const");
	}
}

class Child extends Parent
{
	Child()
	{
		System.out.println("in constrctor");
	}
	Child(int a)
	{
		System.out.println("in param constructor");
	}
}


class Child2 extends Parent
{
	Child2()
	{
		System.out.println("in child 2 constrctor");
	}
}




7)Define a parent and a child class . Now explain function overriding with Example.




ckage falguni;

public class Inher {

	public static void main(String[] args) 
	{
		Parent p=new Child();
		p.t();
		
		
	}

}


class Parent
{
	public void t()
	{
		System.out.println("in Parent const");
	}
}

class Child extends Parent
{
	public void t()
	{
		System.out.println("in child constrctor");
	}
	
}



-----------------------------------------------------------------



8)Define a parent class with one function. Define child class with the function having same name as of parent class function, but having different argument.
Create an instance of child class and call the functions. Make sure u have followed the concept of “function overloading “ in inheritance.



package falguni;

public class Inher {

	public static void main(String[] args) 
	{
		Child p=new Child();
		p.t();
		p.t(2);
		
	}

}


class Parent
{
	public void t()
	{
		System.out.println("in Parent const");
	}
}

class Child extends Parent
{
	public void t(int a)
	{
		System.out.println("in child constrctor");
	}
	
}


.......................................................


9)Define a class “Shape” with “draw()” function . Now derive  classes like “Circle”, “Polygon”,”Rectangle” etc. from “Shape” and override “draw()” function. Define a class “ShapeDemo” in which  write  main()  function. In the main function create a reference to Shape class referring to any of the sub class. Using this reference, call “draw()” and check the result.




package falguni;

public class ShapeDemo {

	public static void main(String[] args) 
	{
		Shape s=new Circle();
		Shape d=new polygon();
		Shape c=new Rectangle();
		s.draw();
		d.draw();
		c.draw();
		
		

	}

}

class Shape 
{
	void draw()
	{
		System.out.println("shape");
	}
}
 class Circle extends Shape
 {
	 void draw()
	 {
		 System.out.println("circle");
	 }
 }
 
 class polygon extends Shape
 {
	 void draw()
	 {
		 System.out.println("polygon");
	 }
 }
 
 class Rectangle extends Shape
 {
	 void draw()
	 {
		 System.out.println("rectangle");
	 }
 }


.....................................


10) Define an interface “Vechicle” with “start()” function . Now derive  classes like “TwoWheeler”, “ThreeWheeler”,”FourWheeler” etc. from “Vehicle” and override “start()” function. Define a class “VDemo” in which  write  main()  function. In the main function create a reference to Vehicle  class referring to any of the sub class. Using this reference, call “start" method.



package falguni;

public class Vdemo 
{

	public static void main(String[] args) 
	{
		Vehicle v=new Twowheeler();
		Vehicle v1=new Threewheeler();
		Vehicle v2=new Fourwheeler();
		v.start();
		v1.start();
		v2.start();
		

	}

}


class Vehicle
{
	void start()
	{
		System.out.println("in vehicle");
	}
}

class Twowheeler extends Vehicle
{
	void start()
	{
		System.out.println("in Twowheeler");
	}
}

class Threewheeler extends Vehicle
{
	void start()
	{
		System.out.println("in Threewheeler");
	}
}

class Fourwheeler extends Vehicle
{
	void start()
	{
		System.out.println("in Fourwheeler");
	}
}



......................







